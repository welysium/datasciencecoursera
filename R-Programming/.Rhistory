add2 <- function(x,y) {
x + y
}
add2(2 + 5)
add2(2,5)
above <- function(x,n) {
use <-x>n
x[use]
}
above(10,12)
above(10,1)
above <- function(x,n) {
use <- x > n
x[use]
}
x <- 1:20
above(x,12)
above <- function(x,n=10) {
use <- x > n
x[use]
}
above(x)
columnmean <- function(x){
nc <- ncol(x)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(x[,i])
}
means
}
columnmean <- function(x, removeNA = TRUE) {
##removes NA
nc <- ncol(x)
means <- numeric(nc) ##empty vector, all 0's
for (i in 1:nc) {
##for loop with cycles that = length of nc
means[i] <- mean(x[, i], na.rm = removeNA)
}
means ##return
}
x <- as.Date("1970-01-01")
unclass(x)
## will say 0 bc it has not changed
unclass(as.Date("1970-01-02"))
x <- as.Date("1970-01-01")
unclass(x)
## will say 0 bc it has not changed
unclass(as.Date("1970-01-05"))
p$sec #will show the system seconds
x <- Sys.time()
x
p <- as.POSIXlt(x)
p$sec
names(unclass(p))
x <- as.Date("1970-01-01")
source('~/.active-rstudio-document', echo=TRUE)
datestring <- c("January 10, 2012 10:40", "December 9, 2011 9:10")
x <- strptime(datestring, "%B %d, %Y %H:%M")
## use ?strptime to get the formatting strings (%B = month, %d = day, etc)
strptime will correct the formatting of your dates if they are not in YYYY-MM-DD format
datestring <- c("January 10, 2012 10:40", "December 9, 2011 9:10")
x <- strptime(datestring, "%B %d, %Y %H:%M")
x
?strptime
install.packages("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2+1000
my_div
getwd()
ls()
x <-9
ls()
list.files()
dir()
?list.files
args(list.files)
old.dir <- dir()
old.dir <- getwd()
dir.create(testdir)
args(dir.create)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
?file.path
file.path("mytest3.R", fsep = .Platform$file.sep)
file.path("folder 1", "folder 2", fsep = .Platform$file.sep)
file.path("folder 1", "folder 2")
file.path("folder 1", "folder 2")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3")), recursive = TRUE)
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?':'
seq(1,20)
seq(0,10,by=0.5)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect <1
tf
num_vect >=6
my_char <- c("My","name", "is")
my_char
paste(my_char, collapse=" ")
c(my_char, "Elyse")
my_name = c(my_char, "Elyse")
my_name
paste(my_name)
paste(my_name, collapse=" ")
paste("Hello", "world!", sep =" ")
paste(c(1:3), c("X","Y","Z"), sep ="")
paste(LETTERS, 1:4, sep ="")
paste(LETTERS, 1:4, sep ="-")
x <- c(44,NA,5,NA)
x*3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z), 100)
my.na <- is.na(my_data)
my_na <- is.na(my_data)
my-na
my_na
my_data ==NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
c(x[3], x[5], x[7])
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2<- matrix(1:20, nrow= 4, ncol=5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames, my_data)
colnames(cnames)
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 ==7
6<7
10<=10
5!=7
5 !=7
5 !== 7
!5 == 7
false & false
FALSE & FALSE
TRUE & C(TRUE, FALSE, FALSE)
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5==6, !FALSE)
xor(!!TRUE, !!FALSE)
ints <- sample(10)
ints
ints >5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function("My first function!")
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor =11,num=5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(sd, c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[tail(x)]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("yo", "wassup fam")
submit()
mad_libs( place = "home", adjective = loud, noun = "frogs")
mad_libs( place = "home", adjective = "loud", noun = "frogs")
submit()
"I" %p% "love" %p% "R!"
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(t1)
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time()-t1
difftime(Sys.time(), t1, units = 'days')
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
?read.csv
read.csv(\specdata\1)
read.csv(specdata/1)
read.csv("specdata/1"")
table <- read.csv("specdata/1")
table <- read.csv(specdata/1)
table <- read.csv(~specdata/1)
table <- read.csv("~specdata/1")
table <- read.csv("~specdata/1.csv")
table <- read.csv("~specdata\1.csv")
table <- read.csv("~specdata\001.csv")
table <- read.csv("~specdata/001.csv")
table <- read.csv("~specdata/001")
table <- read.csv("~/specdata/001")
table <- read.csv("~/RFiles/RStudio/R-Programming/Week 2/specdata/001")
table <- read.csv("~/RFiles/RStudio/R-Programming/Week 2/specdata/001.cvs")
